import dash
import pandas as pd
from dash import Dash, html, dcc, Input, Output, callback

def get_last_7_days_weather(csv_file_path, station_name=None):
    """
    L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt 7 ng√†y cu·ªëi c√πng
    """
    try:
        # ƒê·ªçc CSV
        df = pd.read_csv(csv_file_path)

        # L·ªçc theo tr·∫°m n·∫øu c√≥
        if station_name:
            df = df[df['NAME'] == station_name]


        # S·∫Øp x·∫øp theo YMD v√† l·∫•y 7 ng√†y cu·ªëi
        last_7_days = df.tail(7)
        print(last_7_days)

        # Ch·ªçn c√°c c·ªôt c·∫ßn thi·∫øt
        weather_data = last_7_days[['YMD', 'NAME', 'YEAR', 'MONTH', 'DAY', 'TMP_2', 'AT mean', 'AT max']].copy()

        # T·∫°o th√™m c·ªôt ng√†y trong tu·∫ßn
        weather_data['DATE'] = pd.to_datetime(weather_data['YMD'])
        weather_data['WEEKDAY'] = weather_data['DATE'].dt.strftime('%A')  # Monday, Tuesday, etc.
        weather_data['DATE_STR'] = weather_data['DATE'].dt.strftime('%d/%m')  # 25/12

        print(f"L·∫•y ƒë∆∞·ª£c {len(weather_data)} ng√†y cho tr·∫°m {station_name}")
        return weather_data.to_dict('records')  # Tr·∫£ v·ªÅ list of dictionaries

    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {e}")
        return []


def get_weather_icon(tmp_2, at_max):
    """
    Ch·ªçn icon th·ªùi ti·∫øt d·ª±a tr√™n nhi·ªát ƒë·ªô
    """
    if at_max >= 35:
        return "üå°Ô∏è"  # R·∫•t n√≥ng
    elif tmp_2 >= 30:
        return "‚òÄÔ∏è"  # N·∫Øng
    elif tmp_2 >= 25:
        return "‚õÖ"  # √çt m√¢y
    elif tmp_2 >= 20:
        return "‚òÅÔ∏è"  # C√≥ m√¢y
    else:
        return "üå®Ô∏è"  # L·∫°nh

def create_weather_card(day_data, is_today=False):
    """
    T·∫°o m·ªôt th·∫ª card cho m·ªôt ng√†y
    """
    card_style = {
        'border': '2px solid #007bff' if is_today else '1px solid #ddd',
        'borderRadius': '10px',
        'padding': '15px',
        'margin': '5px',
        'backgroundColor': '#f8f9fa' if is_today else 'white',
        'boxShadow': '0 4px 8px rgba(0,0,0,0.1)',
        'textAlign': 'center',
        'fontFamily': 'Times New Roman'
    }

    return html.Div([
        # Ng√†y v√† th·ª©
        html.H5(
            f"{day_data['WEEKDAY'][:3]}" if not is_today else "H√¥m nay",
            style={'margin': '0', 'color': '#007bff' if is_today else '#333', 'fontSize': '14px'}
        ),
        html.P(
            day_data['DATE_STR'],
            style={'margin': '5px 0', 'fontSize': '12px', 'color': '#666'}
        ),

        # Icon th·ªùi ti·∫øt
        html.Div(
            get_weather_icon(day_data['TMP_2'], day_data['AT max']),
            style={'fontSize': '30px', 'margin': '10px 0'}
        ),

        # Nhi·ªát ƒë·ªô
        html.Div([
            html.Span(f"{day_data['AT max']:.0f}¬∞",
                      style={'fontSize': '18px', 'fontWeight': 'bold', 'color': '#ff6b6b'}),
            html.Span(" / ", style={'margin': '0 3px', 'color': '#999'}),
            html.Span(f"{day_data['TMP_2']:.0f}¬∞",
                      style={'fontSize': '14px', 'color': '#4ecdc4'})
        ], style={'margin': '10px 0'}),

        # C·∫£m nh·∫≠n
        html.P(
            f"C·∫£m nh·∫≠n: {day_data['AT mean']:.0f}¬∞C",
            style={'margin': '5px 0', 'fontSize': '11px', 'color': '#888'}
        )
    ], style=card_style)


def create_7_day_forecast(csv_file_path, selected_station):
    """
    T·∫°o component d·ª± b√°o 7 ng√†y
    """
    try:
        # L·∫•y d·ªØ li·ªáu 7 ng√†y
        weather_data = get_last_7_days_weather(csv_file_path, selected_station)

        if not weather_data:
            return html.Div("Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt", style={'textAlign': 'center'})

        # T·∫°o cards cho 7 ng√†y
        cards = []
        for i, day_data in enumerate(weather_data):
            is_today = (i == len(weather_data) - 1)  # Ng√†y cu·ªëi c√πng l√† "h√¥m nay"
            cards.append(create_weather_card(day_data, is_today))

        return html.Div([
            html.H3(
                f"D·ª± b√°o th·ªùi ti·∫øt 7 ng√†y - {selected_station}",
                style={
                    'textAlign': 'center',
                    'fontFamily': 'Times New Roman',
                    'marginBottom': '20px',
                    'color': '#333'
                }
            ),
            html.Div(
                cards,
                style={
                    'display': 'flex',
                    'flexWrap': 'wrap',
                    'justifyContent': 'center',
                    'gap': '10px'
                }
            )
        ])

    except Exception as e:
        return html.Div(f"L·ªói: {str(e)}", style={'color': 'red', 'textAlign': 'center'})

def create_enhanced_weather_card(day_data, is_today=False):
    """
    Version n√¢ng cao v·ªõi gradient v√† animation
    """
    gradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" if is_today else "white"
    text_color = "white" if is_today else "#333"

    return html.Div([
        # Content t∆∞∆°ng t·ª± nh∆∞ng v·ªõi style ƒë·∫πp h∆°n
    ], style={
        'background': gradient,
        'color': text_color,
        'borderRadius': '15px',
        'padding': '20px',
        'margin': '10px',
        'boxShadow': '0 8px 25px rgba(0,0,0,0.15)',
        'transition': 'transform 0.3s ease',
        'cursor': 'pointer',
        'minWidth': '120px'
    })